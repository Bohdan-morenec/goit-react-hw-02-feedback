{"version":3,"sources":["Statistics.js","FeedbackOptions.js","Notification.js","Section.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","this","props","good","neutral","bad","total","positivePercentage","Component","FeedbackOptions","onClick","options","a","message","Section","state","eventСatcher","review","setState","countPositiveFeedbackPercentage","Math","trunc","countTotalFeedback","Statistic","Notification","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAGaA,EAAb,4JACE,WACE,MAA0DC,KAAKC,MAAvDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBAEnC,OACE,8BACE,+BACE,uCACO,+BAAOJ,OAEd,0CACU,+BAAOC,OAEjB,sCACM,+BAAOC,OAEb,wCACQ,+BAAOC,OAEf,oDAEGC,EAFH,gBAnBV,GAAgCC,aCDnBC,EAAb,4JACE,WACE,OACE,qCACE,wBAAQC,QAAST,KAAKC,MAAMS,QAAQ,QAApC,kBACA,wBAAQD,QAAST,KAAKC,MAAMS,QAAQ,WAApC,qBACA,wBAAQD,QAAST,KAAKC,MAAMS,QAAQ,OAApC,wBANR,GAAqCH,aCQtBI,EARL,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACX,OAAO,8BAAMA,KCEFC,EAAb,4MACEC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,GAJT,EAOEW,kBAAe,SAACC,GAAD,OAAY,WACzB,EAAKC,SAAL,eAAiBD,EAAS,EAAKF,MAAME,GAAU,MARnD,EAWEE,gCAAkC,kBAChCC,KAAKC,MAAO,IAAM,EAAKN,MAAMZ,KAAQ,EAAKmB,uBAZ9C,EAcEA,mBAAqB,kBACnB,EAAKP,MAAMZ,KAAO,EAAKY,MAAMX,QAAU,EAAKW,MAAMV,KAftD,4CAiBE,WACE,IACIkB,EADJ,EAA+BtB,KAAKc,MAA5BZ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAgBvB,OAZEkB,EADgC,IAA9BtB,KAAKqB,qBAEL,cAAC,EAAD,CACEnB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOL,KAAKqB,qBACZf,mBAAoBN,KAAKkB,oCAIjB,cAACK,EAAD,CAAcX,QAAQ,sBAGlC,oCACE,uDACA,cAAC,EAAD,CAAiBF,QAASV,KAAKe,oBAC/B,4CACCO,SAvCT,GAA6Bf,aCMdiB,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a2f14181.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class Statistics extends Component {\r\n  render() {\r\n    const { good, neutral, bad, total, positivePercentage } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <ul>\r\n          <li>\r\n            Good <span>{good}</span>\r\n          </li>\r\n          <li>\r\n            Neutral <span>{neutral}</span>\r\n          </li>\r\n          <li>\r\n            Bad <span>{bad}</span>\r\n          </li>\r\n          <li>\r\n            total <span>{total}</span>\r\n          </li>\r\n          <li>\r\n            Positive feedback:\r\n            {positivePercentage}%\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nexport class FeedbackOptions extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <button onClick={this.props.options(\"good\")}>good</button>\r\n        <button onClick={this.props.options(\"neutral\")}>neutral</button>\r\n        <button onClick={this.props.options(\"bad\")}>bad</button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst a = ({ message }) => {\r\n  return <div>{message}</div>;\r\n};\r\n\r\na.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default a;\r\n","import { Component } from \"react\";\r\nimport { Statistics } from \"./Statistics\";\r\nimport { FeedbackOptions } from \"./FeedbackOptions\";\r\nimport Notification from \"./Notification\";\r\n\r\nexport class Section extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  eventСatcher = (review) => () => {\r\n    this.setState({ [review]: this.state[review] + 1 });\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () =>\r\n    Math.trunc((100 * this.state.good) / this.countTotalFeedback());\r\n\r\n  countTotalFeedback = () =>\r\n    this.state.good + this.state.neutral + this.state.bad;\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    let Statistic;\r\n\r\n    if (this.countTotalFeedback() !== 0) {\r\n      Statistic = (\r\n        <Statistics\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={this.countTotalFeedback()}\r\n          positivePercentage={this.countPositiveFeedbackPercentage()}\r\n        ></Statistics>\r\n      );\r\n    } else {\r\n      Statistic = <Notification message=\"No feedback given\"></Notification>;\r\n    }\r\n    return (\r\n      <section>\r\n        <h1>Please leave feedback</h1>\r\n        <FeedbackOptions options={this.eventСatcher}></FeedbackOptions>\r\n        <h2>Statistics</h2>\r\n        {Statistic}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport { Section } from \"./Section\";\n\nfunction App() {\n  return (\n    <div>\n      <Section />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}